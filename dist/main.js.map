{"version":3,"file":"main.js","sources":["../src/modules/events.ts","../src/modules/renderBox.ts","../src/components/editor.ts","../src/utils/position.ts","../src/components/scroller.ts","../src/modules/cell.ts","../src/components/sheet.ts","../src/components/table.ts","../src/components/toolbar.ts","../src/modules/config.ts","../src/modules/selection.ts","../src/modules/styles.ts","../src/modules/viewport.ts","../src/modules/column.ts","../src/modules/row.ts","../src/utils/createData.ts","../src/modules/cache.ts","../src/components/columnsBar.ts","../src/components/rowsBar.ts","../src/modules/clipboard.ts","../src/main.ts"],"sourcesContent":["import { Selection } from \"../main\";\nexport var EventTypes;\n(function (EventTypes) {\n    EventTypes[\"CELL_CLICK\"] = \"CELL_CLICK\";\n    EventTypes[\"SELECTION_CHANGE\"] = \"CHANGE_SELECTION\";\n    EventTypes[\"CELL_CHANGE\"] = \"CELL_CHANGE\";\n    EventTypes[\"COPY_CELLS\"] = \"COPY_CELLS\";\n})(EventTypes || (EventTypes = {}));\nexport class Events {\n    root;\n    constructor(root) {\n        this.root = root;\n    }\n    dispatch(action) {\n        switch (action.type) {\n            case EventTypes.CELL_CLICK: {\n                const { event, scroller } = action;\n                //\n                //* Here may be side effects\n                //\n                this.cellClick(event, scroller);\n                break;\n            }\n            case EventTypes.SELECTION_CHANGE: {\n                const { selection, enableCallback } = action;\n                //\n                //* Here may be side effects\n                //\n                this.changeSelection(selection, enableCallback);\n                break;\n            }\n            case EventTypes.CELL_CHANGE: {\n                const { cell, enableCallback } = action;\n                //\n                //* Here may be side effects\n                //\n                this.changeCellValues(cell, enableCallback);\n                break;\n            }\n            case EventTypes.COPY_CELLS: {\n                const { data, dataAsString, range } = action;\n                this.copy(range, data, dataAsString);\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n    cellClick = (event, scroller) => {\n        if (event.button !== 0)\n            return; // Left mouse button\n        const { offsetX, offsetY } = event;\n        const clickedCell = this.root.getCellByCoords(offsetX, offsetY);\n        const cell = this.root.getCell(clickedCell);\n        const selection = new Selection();\n        selection.selectedCell = clickedCell;\n        selection.selectedRange = {\n            from: clickedCell,\n            to: clickedCell,\n        };\n        scroller.setSelectingMode(true);\n        this.changeSelection(selection, true);\n        this.root.config.onCellClick?.(event, cell);\n    };\n    changeSelection = (selection, enableCallback = false) => {\n        this.root.selection = selection;\n        if (enableCallback)\n            this.root.config.onSelectonChange?.(selection);\n        this.root.renderSheet();\n        this.root.renderColumnsBar();\n        this.root.renderRowsBar();\n    };\n    changeCellValues(cell, enableCallback = true) {\n        if (enableCallback)\n            this.root.config.onCellChange?.(cell);\n    }\n    copy = (range, data, dataAsString) => {\n        this.root.config.onCopy?.(range, data, dataAsString);\n    };\n}\n","export class RenderBox {\n    x;\n    y;\n    width;\n    height;\n    constructor(config, cellPosition) {\n        this.x = this.getXCoord(cellPosition.column, config);\n        this.y = this.getYCoord(cellPosition.row, config);\n        this.width = config.columns[cellPosition.column].width;\n        this.height = config.rows[cellPosition.row].height;\n    }\n    getXCoord(column, config) {\n        let x = 0;\n        for (let i = 0; i < column; i++) {\n            x += config.columns[i].width;\n        }\n        return x;\n    }\n    getYCoord(row, config) {\n        let y = 0;\n        for (let i = 0; i < row; i++) {\n            y += config.rows[i].height;\n        }\n        return y;\n    }\n}\n","import { CSS_PREFIX } from \"../main\";\nimport { EventTypes } from \"../modules/events\";\nimport { RenderBox } from \"../modules/renderBox\";\nexport class Editor {\n    element;\n    root;\n    constructor(root) {\n        this.root = root;\n        const element = document.createElement(\"input\");\n        element.classList.add(CSS_PREFIX + \"editor\");\n        this.element = element;\n        this.hide();\n    }\n    hide() {\n        this.element.style.display = \"none\";\n        this.element.classList.add(\"hide\");\n        this.element.blur();\n        window.removeEventListener(\"click\", this.handleClickOutside);\n        this.element.removeEventListener(\"keydown\", this.handleKeydown);\n        this.root.focusTable();\n    }\n    show(position, initialString) {\n        const { height, width, x, y } = new RenderBox(this.root.config, position);\n        const cell = this.root.getCell(position);\n        this.element.classList.remove(\"hide\");\n        this.element.style.top =\n            y - this.root.viewport.top + this.root.columnsBarHeight + \"px\";\n        this.element.style.left =\n            x - this.root.viewport.left + this.root.rowsBarWidth + \"px\";\n        this.element.style.width = width + \"px\";\n        this.element.style.height = height + \"px\";\n        this.element.style.display = \"block\";\n        window.addEventListener(\"click\", this.handleClickOutside);\n        this.element.addEventListener(\"keydown\", this.handleKeydown);\n        this.element.value = initialString ? initialString : cell.value;\n        this.element.focus();\n        if (!initialString)\n            this.element.select();\n    }\n    handleKeydown = (event) => {\n        const { key } = event;\n        switch (key) {\n            case \"Escape\": {\n                this.hide();\n                break;\n            }\n            case \"Enter\": {\n                if (!this.root.selection.selectedCell)\n                    return;\n                this.root.changeCellValues(this.root.selection.selectedCell, {\n                    value: this.element.value,\n                    displayValue: this.element.value,\n                });\n                this.root.events.dispatch({\n                    type: EventTypes.CELL_CHANGE,\n                    cell: this.root.getCell(this.root.selection.selectedCell),\n                });\n                this.hide();\n                this.root.renderSelection();\n            }\n        }\n    };\n    handleClickOutside = (event) => {\n        const target = event.target;\n        if (!this.element.contains(target)) {\n            this.hide();\n        }\n    };\n}\n","export function checkEqualRanges(range1, range2) {\n    const equalRows = range1.from.row === range2.to.row;\n    const equalColumns = range1.from.column === range2.to.column;\n    return equalRows && equalColumns;\n}\nexport function checkEqualCellSelections(selection1, selection2) {\n    return (selection1.column === selection2.column && selection1.row === selection2.row);\n}\n","import { CSS_PREFIX, Selection } from \"../main\";\nimport { EventTypes } from \"../modules/events\";\nimport { checkEqualCellSelections } from \"../utils/position\";\nexport class Scroller {\n    element;\n    verticalScroller;\n    horizontalScroller;\n    root;\n    isSelecting = false;\n    constructor(root) {\n        this.root = root;\n        const { horizontalScroller, scroller, verticalScroller } = this.buildComponent();\n        this.element = scroller;\n        this.verticalScroller = verticalScroller;\n        this.horizontalScroller = horizontalScroller;\n        this.element.style.height = this.root.config.view.height + \"px\";\n        this.element.style.width = this.root.config.view.width + \"px\";\n        this.element.style.top = this.root.columnsBarHeight + \"px\";\n        this.element.style.left = this.root.rowsBarWidth + \"px\";\n        this.element.tabIndex = -1;\n        this.updateScrollerSize(); //* Init size set\n        this.element.addEventListener(\"scroll\", this.handleScroll);\n        this.element.addEventListener(\"mousedown\", this.handleClick);\n        this.element.addEventListener(\"mousemove\", this.handleMouseMove);\n        this.element.addEventListener(\"mouseup\", this.handleMouseUp);\n        this.element.addEventListener(\"dblclick\", this.handleDoubleClick);\n        this.element.addEventListener(\"keydown\", this.handleKeydown);\n        this.element.addEventListener(\"paste\", (event) => {\n            if (!this.root.selection.selectedCell)\n                return;\n            this.root.clipboard.paste(this.root, this.root.selection.selectedCell, event);\n        });\n    }\n    setSelectingMode(mode) {\n        this.isSelecting = mode;\n    }\n    handleMouseMove = (event) => {\n        if (!this.isSelecting)\n            return;\n        const { offsetX, offsetY } = event;\n        const lastSelectedCell = this.root.getCellByCoords(offsetX, offsetY);\n        let isRangeChanged = false;\n        if (this.root.selection.selectedRange) {\n            isRangeChanged = !checkEqualCellSelections(this.root.selection.selectedRange.to, lastSelectedCell);\n            if (isRangeChanged) {\n                this.root.selection.selectedRange.to = lastSelectedCell;\n                this.root.events.dispatch({\n                    type: EventTypes.SELECTION_CHANGE,\n                    selection: this.root.selection,\n                    enableCallback: true,\n                });\n            }\n        }\n    };\n    handleMouseUp = () => {\n        this.isSelecting = false;\n        const newSelection = { ...this.root.selection };\n        if (this.root.selection.selectedRange) {\n            if (checkEqualCellSelections(this.root.selection.selectedRange.from, this.root.selection.selectedRange.to)) {\n                newSelection.selectedRange = null;\n                this.root.events.dispatch({\n                    type: EventTypes.SELECTION_CHANGE,\n                    selection: newSelection,\n                    enableCallback: false,\n                });\n            }\n        }\n        this.root.renderSheet();\n        this.root.renderColumnsBar();\n        this.root.renderRowsBar();\n    };\n    handleDoubleClick = (event) => {\n        event.preventDefault();\n        const position = this.root.getCellByCoords(event.offsetX, event.offsetY);\n        this.root.showEditor(position);\n    };\n    handleKeydown = (event) => {\n        //* Navigation\n        if ([\"ArrowLeft\", \"ArrowRight\", \"ArrowUp\", \"ArrowDown\"].includes(event.key)) {\n            event.preventDefault();\n            this.root.selection.selectedRange = null;\n            switch (event.key) {\n                case \"ArrowLeft\": {\n                    if (this.root.selection.selectedCell &&\n                        this.root.selection.selectedCell.column > 0) {\n                        this.root.selection.selectedCell.column -= 1;\n                        // this.root.renderSheet();\n                    }\n                    break;\n                }\n                case \"ArrowRight\": {\n                    if (this.root.selection.selectedCell &&\n                        this.root.selection.selectedCell.column <\n                            this.root.config.columns.length - 1) {\n                        this.root.selection.selectedCell.column += 1;\n                        // this.root.renderSheet();\n                    }\n                    break;\n                }\n                case \"ArrowUp\": {\n                    if (this.root.selection.selectedCell &&\n                        this.root.selection.selectedCell.row > 0) {\n                        this.root.selection.selectedCell.row -= 1;\n                        // this.root.renderSheet();\n                    }\n                    break;\n                }\n                case \"ArrowDown\": {\n                    if (this.root.selection.selectedCell &&\n                        this.root.selection.selectedCell.row <\n                            this.root.config.rows.length - 1) {\n                        this.root.selection.selectedCell.row += 1;\n                        // this.root.renderSheet();\n                    }\n                    break;\n                }\n            }\n            this.root.events.dispatch({\n                type: EventTypes.SELECTION_CHANGE,\n                selection: this.root.selection,\n                enableCallback: true,\n            });\n        }\n        //* Start typings\n        const keysRegex = /^([a-z]|[а-я]|[0-9])$/;\n        if (!event.metaKey && !event.ctrlKey) {\n            //* Prevent handle shortcutrs\n            const isPressedLetterKey = keysRegex.test(event.key.toLowerCase());\n            if (event.key === \"F2\" || isPressedLetterKey) {\n                //* English and Russian keyboard. Or F2 button\n                event.preventDefault();\n                if (!this.root.selection.selectedCell)\n                    return;\n                this.root.showEditor(this.root.selection.selectedCell, isPressedLetterKey ? event.key : undefined);\n            }\n        }\n        if (event.key === \"Delete\") {\n            event.preventDefault();\n            this.root.deleteSelectedCellsValues();\n            this.root.renderSheet();\n        }\n        if (event.metaKey || event.ctrlKey) {\n            if (event.code === \"KeyC\") {\n                let cells = undefined;\n                const selection = new Selection();\n                if (this.root.selection.selectedRange) {\n                    const { from, to } = this.root.selection.selectedRange;\n                    selection.selectedRange = this.root.selection.selectedRange;\n                    const subArrByRows = this.root.data.slice(from.row, to.row + 1);\n                    const subArrByCols = subArrByRows.map((row) => {\n                        return row.slice(from.column, to.column + 1);\n                    });\n                    cells = [...subArrByCols];\n                }\n                else if (this.root.selection.selectedCell) {\n                    const { column, row } = this.root.selection.selectedCell;\n                    cells = [[this.root.data[row][column]]];\n                    selection.selectedRange = {\n                        from: this.root.selection.selectedCell,\n                        to: this.root.selection.selectedCell,\n                    };\n                }\n                else {\n                    return;\n                }\n                this.root.clipboard.copy(cells, selection.selectedRange);\n                return;\n            }\n            if (event.code === \"KeyV\") {\n                // if (!this.root.selection.selectedCell) return;\n                // this.root.clipboard.paste(this.root, this.root.selection.selectedCell);\n            }\n        }\n    };\n    handleClick = (event) => {\n        this.root.events.dispatch({\n            type: EventTypes.CELL_CLICK,\n            event,\n            scroller: this,\n        });\n    };\n    handleScroll = () => {\n        const rect = this.getViewportBoundlingRect();\n        this.root.viewport.updateValues(rect);\n        this.root.renderSheet();\n        this.root.renderColumnsBar();\n        this.root.renderRowsBar();\n    };\n    getViewportBoundlingRect() {\n        const { scrollTop, scrollLeft } = this.element;\n        const { height, width } = this.element.getBoundingClientRect();\n        const bottom = scrollTop + height;\n        const right = scrollLeft + width;\n        return {\n            top: scrollTop,\n            left: scrollLeft,\n            bottom,\n            right,\n        };\n    }\n    buildComponent() {\n        const scroller = document.createElement(\"div\");\n        const verticalScroller = document.createElement(\"div\");\n        const horizontalScroller = document.createElement(\"div\");\n        const groupScrollers = document.createElement(\"div\");\n        const stack = document.createElement(\"div\");\n        verticalScroller.style.width = \"0px\";\n        verticalScroller.style.pointerEvents = \"none\";\n        horizontalScroller.style.pointerEvents = \"none\";\n        groupScrollers.style.display = \"flex\";\n        stack.appendChild(verticalScroller);\n        stack.appendChild(horizontalScroller);\n        groupScrollers.appendChild(stack);\n        this.verticalScroller = verticalScroller;\n        this.horizontalScroller = horizontalScroller;\n        scroller.appendChild(groupScrollers);\n        scroller.contentEditable = \"false\";\n        scroller.classList.add(CSS_PREFIX + \"scroller\");\n        return { scroller, verticalScroller, horizontalScroller };\n    }\n    getActualHeight() {\n        return this.root.config.rows.reduce((acc, curr) => {\n            acc += curr.height;\n            return acc;\n        }, 0);\n    }\n    getActualWidth() {\n        return this.root.config.columns.reduce((acc, curr) => {\n            acc += curr.width;\n            return acc;\n        }, 0);\n    }\n    updateScrollerSize() {\n        const totalHeight = this.getActualHeight();\n        const totalWidth = this.getActualWidth();\n        this.setScrollerHeight(totalHeight);\n        this.setScrollerWidth(totalWidth);\n    }\n    setScrollerHeight(height) {\n        this.verticalScroller.style.height = height + \"px\";\n    }\n    setScrollerWidth(width) {\n        this.horizontalScroller.style.width = width + \"px\";\n    }\n}\n","import { RenderBox } from \"./renderBox\";\nexport class CellStyles {\n    fontSize = 16;\n    fontColor = \"black\";\n    background = \"white\";\n    borderColor = \"black\";\n    selectedBackground = \"#4287f5\";\n    selectedFontColor = \"#ffffff\";\n    constructor(props) {\n        if (props) {\n            Object.assign(this, props); // Override default styles\n        }\n    }\n}\nexport class Position {\n    row;\n    column;\n    constructor(row, column) {\n        this.row = row;\n        this.column = column;\n    }\n}\nexport class SerializableCell {\n    value;\n    displayValue;\n    resultValue;\n    position;\n    style;\n    constructor(props) {\n        this.value = props.value;\n        this.displayValue = props.displayValue;\n        this.resultValue = props.resultValue;\n        this.position = props.position;\n        this.style = props.style;\n    }\n}\nexport class Cell {\n    /** True value (data) */\n    value;\n    /** Value to render */\n    displayValue;\n    /** This refers to the values that were obtained by calculations, for example, after calculating the formula  */\n    resultValue;\n    position;\n    style = null;\n    constructor(props) {\n        this.value = props.value;\n        this.displayValue = props.displayValue;\n        this.resultValue = props.resultValue;\n        this.position = props.position;\n        this.style = props.style;\n    }\n    getSerializableCell() {\n        const cell = new SerializableCell({\n            displayValue: this.displayValue,\n            position: this.position,\n            resultValue: this.resultValue,\n            style: this.style,\n            value: this.value,\n        });\n        return cell;\n    }\n    changeStyles(styles) {\n        this.style = styles;\n    }\n    changeValues(values) {\n        Object.assign(this, values);\n    }\n    // private isCellInRange(root: Spreadsheet): boolean {\n    //   const { column, row } = this.position;\n    //   const { selectedRange } = root.selection;\n    //   if (!selectedRange) return false;\n    //   const isCellInRow =\n    //     row >= Math.min(selectedRange.from.row, selectedRange.to.row) &&\n    //     row <= Math.max(selectedRange.to.row, selectedRange.from.row);\n    //   const isCellInCol =\n    //     column >= Math.min(selectedRange.from.column, selectedRange.to.column) &&\n    //     column <= Math.max(selectedRange.to.column, selectedRange.from.column);\n    //   return isCellInCol && isCellInRow;\n    // }\n    render(root) {\n        const renderBox = new RenderBox(root.config, this.position);\n        let { x, y } = renderBox;\n        const { height, width } = renderBox;\n        const { ctx } = root;\n        // const isCellSelected =\n        //   root.selection.selectedCell?.row === this.position.row &&\n        //   root.selection.selectedCell.column === this.position.column;\n        // const isCellInRange = this.isCellInRange(root);\n        y -= root.viewport.top;\n        x -= root.viewport.left;\n        const styles = this.style ?? root.styles.cells;\n        ctx.clearRect(x, y, width, height);\n        ctx.fillStyle = styles.background;\n        ctx.strokeStyle = \"black\";\n        ctx.fillRect(x, y, width - 1, height - 1);\n        ctx.strokeRect(x, y, width, height);\n        ctx.fillStyle = styles.fontColor;\n        ctx.textAlign = \"left\";\n        ctx.font = `${styles.fontSize}px Arial`;\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(this.displayValue, x + 2, y + height / 2);\n    }\n}\n","import { CSS_PREFIX, RenderBox } from \"../main\";\nimport { Position } from \"../modules/cell\";\n/**\n * Display (CANVAS) element where cells render\n */\nexport class Sheet {\n    element;\n    ctx;\n    root;\n    constructor(root) {\n        this.root = root;\n        const canvas = document.createElement(\"canvas\");\n        canvas.classList.add(CSS_PREFIX + \"sheet\");\n        //* Set up canvas sizes based on provided root config\n        canvas.height = this.root.config.view.height;\n        canvas.width = this.root.config.view.width;\n        canvas.style.width = this.root.config.view.width + \"px\";\n        canvas.style.height = this.root.config.view.height + \"px\";\n        canvas.style.left = \"0px\";\n        this.element = canvas;\n        const ctx = this.element.getContext(\"2d\");\n        if (!ctx)\n            throw new Error(\"Enable hardware acceleration\");\n        this.ctx = ctx;\n    }\n    getCellByCoords(x, y) {\n        let row = 0;\n        let height = 0;\n        while (height <= y) {\n            height += this.root.config.rows[row].height;\n            if (height >= y)\n                break;\n            row++;\n        }\n        let col = 0;\n        let width = 0;\n        while (width <= x) {\n            width += this.root.config.columns[col].width;\n            if (width >= x)\n                break;\n            col++;\n        }\n        return new Position(row, col);\n    }\n    renderCell(position) {\n        const { column, row } = position;\n        this.root.data[row][column].render(this.root);\n    }\n    getSelectionRange() {\n        const { selectedCell, selectedRange } = this.root.selection;\n        if (!selectedCell && !selectedRange)\n            return;\n        if (selectedRange) {\n            const startRow = Math.min(selectedRange.from.row, selectedRange.to.row);\n            const startCol = Math.min(selectedRange.from.column, selectedRange.to.column);\n            const lastRow = Math.max(selectedRange.from.row, selectedRange.to.row);\n            const lastCol = Math.max(selectedRange.from.column, selectedRange.to.column);\n            const startCellBox = new RenderBox(this.root.config, {\n                row: startRow,\n                column: startCol,\n            });\n            let width = 0;\n            for (let col = startCol; col <= lastCol; col++) {\n                width += this.root.config.columns[col].width;\n            }\n            let height = 0;\n            for (let row = startRow; row <= lastRow; row++) {\n                height += this.root.config.rows[row].height;\n            }\n            const x = startCellBox.x - this.root.viewport.left;\n            const y = startCellBox.y - this.root.viewport.top;\n            return { x, y, height, width };\n        }\n        if (!selectedRange && selectedCell) {\n            const box = new RenderBox(this.root.config, selectedCell);\n            box.x -= this.root.viewport.left;\n            box.y -= this.root.viewport.top;\n            return box;\n        }\n    }\n    renderSelectionRange(x, y, width, height) {\n        this.ctx.save();\n        this.ctx.strokeStyle = \"#47d1ff\";\n        this.ctx.lineWidth = 3;\n        this.ctx.strokeRect(x, y, width, height);\n        this.ctx.fillStyle = \"#7da8ff50\";\n        this.ctx.fillRect(x, y, width, height);\n        this.ctx.restore();\n    }\n    renderSelection() {\n        const box = this.getSelectionRange();\n        if (!box)\n            return;\n        const { height, width, x, y } = box;\n        this.renderSelectionRange(x, y, width, height);\n    }\n    renderSheet() {\n        const firstRowIdx = this.root.viewport.firstRow;\n        const lastColIdx = this.root.viewport.lastCol + 3;\n        const lastRowIdx = this.root.viewport.lastRow + 3;\n        const firstColIdx = this.root.viewport.firstCol;\n        for (let row = firstRowIdx; row <= lastRowIdx; row++) {\n            for (let col = firstColIdx; col <= lastColIdx; col++) {\n                if (!this.root.config.columns[col] || !this.root.config.rows[row])\n                    break; //* Prevent read undefined\n                this.renderCell({ column: col, row });\n            }\n        }\n        this.renderSelection();\n    }\n}\n","import { CSS_PREFIX } from \"../main\";\n/** Base (root) component */\nexport class Table {\n    element;\n    root;\n    constructor(root) {\n        this.root = root;\n        const container = document.createElement(\"div\");\n        container.classList.add(CSS_PREFIX + \"spreadsheet_container\");\n        this.element = container;\n        this.changeElementSizes(this.root.viewProps);\n    }\n    changeElementSizes(sizes) {\n        const { height, width } = sizes;\n        this.element.style.width = width + this.root.rowsBarWidth + \"px\";\n        this.element.style.height = height + this.root.columnsBarHeight + \"px\";\n    }\n}\n","import { CSS_PREFIX } from \"../main\";\nexport class Toolbar {\n    element;\n    root;\n    height = 0;\n    constructor(root) {\n        this.root = root;\n        const toolbarElement = document.createElement(\"div\");\n        toolbarElement.classList.add(CSS_PREFIX + \"toolbar\");\n        this.element = toolbarElement;\n    }\n}\n","export class Config {\n    rows;\n    columns;\n    view = {\n        width: 800,\n        height: 600,\n    };\n    onCellClick = null;\n    onSelectonChange = null;\n    onCellChange = null;\n    onCopy;\n    constructor(props) {\n        this.columns = props.columns;\n        this.rows = props.rows;\n        this.view = props.view;\n        this.onCellClick = props.onCellClick ?? null;\n        this.onSelectonChange = props.onSelectionChange ?? null;\n        this.onCellChange = props.onCellChange ?? null;\n        this.onCopy = props.onCopy ?? null;\n    }\n}\n","export class Selection {\n    selectedCell = null;\n    selectedRange = null;\n}\n","import { CellStyles } from \"./cell\";\nexport class Styles {\n    cells;\n    constructor() {\n        this.cells = new CellStyles();\n    }\n}\n","export class Viewport {\n    root;\n    top;\n    left;\n    right;\n    bottom;\n    firstRow;\n    lastRow;\n    firstCol;\n    lastCol;\n    constructor(root, props) {\n        this.root = root;\n        this.top = props.top;\n        this.left = props.left;\n        this.right = props.right;\n        this.bottom = props.bottom;\n        this.firstRow = this.getFirstRow();\n        this.lastCol = this.getFirstRow(); //!Temp\n        this.firstCol = this.getFirstRow(); //!Temp\n        this.lastRow = this.getLastRow();\n        this.updateValues({\n            top: 0,\n            left: 0,\n            right: this.root.viewProps.width,\n            bottom: this.root.viewProps.height,\n        });\n    }\n    updateValues(props) {\n        this.top = props.top;\n        this.left = props.left;\n        this.right = props.right;\n        this.bottom = props.bottom;\n        this.firstRow = this.getFirstRow();\n        this.lastRow = this.getLastRow();\n        this.firstCol = this.getFirstCol();\n        this.lastCol = this.getLastCol();\n    }\n    /** Get index of first row in viewport */\n    getFirstRow() {\n        const rowIdx = this.root.cache.getRowByYCoord(this.top);\n        return rowIdx;\n    }\n    getLastRow() {\n        const rowIdx = this.root.cache.getRowByYCoord(this.bottom);\n        return rowIdx;\n    }\n    getFirstCol() {\n        const colIdx = this.root.cache.getColumnByXCoord(this.left);\n        return colIdx;\n    }\n    getLastCol() {\n        const colIdx = this.root.cache.getColumnByXCoord(this.right);\n        return colIdx;\n    }\n}\n","export class Column {\n    width;\n    title;\n    constructor(props) {\n        this.width = props.width;\n        this.title = props.title;\n    }\n}\n","export class Row {\n    height;\n    title;\n    constructor(props) {\n        this.height = props.height;\n        this.title = props.title;\n    }\n}\n","import { Cell } from \"../modules/cell\";\nimport { Column } from \"../modules/column\";\nimport { Config } from \"../modules/config\";\nimport { Row } from \"../modules/row\";\nexport function createSampleData(rows, columns, fillCellsByCoords = false) {\n    const data = [];\n    for (let row = 0; row <= rows; row++) {\n        const innerRow = [];\n        for (let col = 0; col <= columns; col++) {\n            const value = fillCellsByCoords ? `${row}:${col}` : \"\";\n            const cell = new Cell({\n                displayValue: value,\n                resultValue: value,\n                value,\n                position: {\n                    column: col,\n                    row: row,\n                },\n                style: null,\n            });\n            innerRow.push(cell);\n        }\n        data.push(innerRow);\n    }\n    return data;\n}\nexport function createSampleConfig(rows, columns) {\n    const rowsArr = [];\n    for (let i = 0; i <= rows; i++) {\n        const rowItem = new Row({\n            height: 40,\n            title: String(i),\n        });\n        rowsArr.push(rowItem);\n    }\n    const colsArr = [];\n    for (let i = 0; i <= columns; i++) {\n        const colItem = new Column({\n            title: String(i),\n            width: 150,\n        });\n        colsArr.push(colItem);\n    }\n    const config = new Config({\n        columns: colsArr,\n        rows: rowsArr,\n        view: {\n            height: 600,\n            width: 800,\n        },\n    });\n    return config;\n}\nexport function makeSpreadsheetConfigAndData(rows, columns) {\n    const data = createSampleData(rows, columns);\n    const config = createSampleConfig(rows, columns);\n    return { data, config };\n}\n","export class CachedColumn {\n    xPos;\n    colIdx;\n    constructor(props) {\n        this.xPos = props.xPos;\n        this.colIdx = props.colIdx;\n    }\n}\nexport class CachedRow {\n    yPos;\n    rowIdx;\n    constructor(props) {\n        this.yPos = props.yPos;\n        this.rowIdx = props.rowIdx;\n    }\n}\nexport class Cache {\n    columns;\n    rows;\n    constructor(initial) {\n        this.columns = initial.columns;\n        this.rows = initial.rows;\n    }\n    getRowByYCoord(y) {\n        let rowIdx = 0;\n        for (let i = 0; i < this.rows.length; i++) {\n            if (y <= this.rows[i].yPos) {\n                //* Intersection detect\n                rowIdx = i;\n                break;\n            }\n        }\n        return rowIdx;\n    }\n    getColumnByXCoord(x) {\n        let colIdx = 0;\n        for (let i = 0; i < this.columns.length; i++) {\n            if (x <= this.columns[i].xPos) {\n                //* Intersection detect\n                colIdx = i;\n                break;\n            }\n        }\n        return colIdx;\n    }\n}\n","import { RenderBox } from \"../main\";\nexport class ColumnsBar {\n    element;\n    root;\n    height = 35;\n    width;\n    // private resizerWidth = 1;\n    ctx;\n    constructor(root) {\n        this.root = root;\n        this.element = this.createElement();\n        const ctx = this.element.getContext(\"2d\");\n        if (!ctx)\n            throw new Error(\"Enable hardware acceleration\");\n        this.ctx = ctx;\n        this.width = this.root.viewProps.width;\n    }\n    createElement() {\n        const element = document.createElement(\"canvas\");\n        element.style.position = \"absolute\";\n        element.style.height = this.height + \"px\";\n        element.style.width = this.root.viewProps.width + \"px\";\n        element.style.display = \"block\";\n        element.style.borderLeft = \"1px solid black\";\n        // element.style.boxSizing = 'border-box'\n        element.width = this.root.viewProps.width;\n        element.height = this.height;\n        return element;\n    }\n    setElementPosition(top, left) {\n        this.element.style.top = top + \"px\";\n        this.element.style.left = left + \"px\";\n    }\n    isColumnSelected(column) {\n        const { selectedCell, selectedRange } = this.root.selection;\n        if (selectedCell && selectedCell.column === column)\n            return true;\n        if (selectedRange) {\n            const inRange = column >=\n                Math.min(selectedRange.from.column, selectedRange.to.column) &&\n                column <= Math.max(selectedRange.from.column, selectedRange.to.column);\n            return inRange;\n        }\n        return false;\n    }\n    // private getYCoordWithOffset(renderBox: RenderBox): number {\n    //     const {y} = renderBox\n    //     return y + this.root.toolbarHeight\n    // }\n    // private getXCoordWithOffset(renderBox: RenderBox): number {\n    //     const {x} = renderBox\n    //     return x\n    // }\n    renderText(column, renderBox) {\n        const { width, x } = renderBox;\n        this.ctx.fillStyle = \"black\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.textBaseline = \"middle\";\n        this.ctx.font = \"12px Arial\";\n        this.ctx.fillText(this.root.config.columns[column].title, x + width / 2 - this.root.viewport.left, 0 + this.height / 2);\n    }\n    renderRect(column, renderBox) {\n        const { width, x } = renderBox;\n        const isColSelected = this.isColumnSelected(column);\n        this.ctx.fillStyle = isColSelected ? \"#c7ebff\" : \"white\";\n        this.ctx.strokeStyle = \"black\";\n        this.ctx.lineWidth = 1;\n        const specialX = x - this.root.viewport.left;\n        this.ctx.fillRect(specialX - 1, 0, width, this.height);\n        this.ctx.strokeRect(specialX - 1, 0, width, this.height);\n    }\n    renderSingleColumn(column) {\n        const renderBox = new RenderBox(this.root.config, {\n            row: 0,\n            column: column,\n        });\n        this.renderRect(column, renderBox);\n        this.renderText(column, renderBox);\n    }\n    renderBar() {\n        const lastColIdx = this.root.viewport.lastCol + 3;\n        const firstColIdx = this.root.viewport.firstCol;\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = \"black\";\n        this.ctx.lineWidth = 1;\n        this.ctx.moveTo(0, 0);\n        this.ctx.lineTo(0, this.height);\n        this.ctx.closePath();\n        this.ctx.stroke();\n        for (let col = firstColIdx; col <= lastColIdx; col++) {\n            if (!this.root.config.columns[col])\n                break;\n            this.renderSingleColumn(col);\n        }\n    }\n}\n","import { RenderBox } from \"../main\";\nexport class RowsBar {\n    element;\n    ctx;\n    root;\n    width = 35;\n    height;\n    resizerHeight = 1;\n    constructor(root) {\n        this.root = root;\n        this.element = this.createElement();\n        const ctx = this.element.getContext(\"2d\");\n        if (!ctx)\n            throw new Error(\"Enable hardware acceleration\");\n        this.ctx = ctx;\n        this.height = this.root.viewProps.height;\n    }\n    createElement() {\n        const element = document.createElement(\"canvas\");\n        element.style.position = \"absolute\";\n        element.style.height = this.root.viewProps.height + \"px\";\n        element.style.width = this.width + \"px\";\n        element.style.display = \"block\";\n        element.style.borderTop = \"1px solid black\";\n        // element.style.boxSizing = 'border-box'\n        element.width = this.width;\n        element.height = this.root.viewProps.height;\n        return element;\n    }\n    setElementPosition(top, left) {\n        this.element.style.top = top + \"px\";\n        this.element.style.left = left + \"px\";\n    }\n    isRowSelected(row) {\n        const { selectedCell, selectedRange } = this.root.selection;\n        if (selectedCell && selectedCell.row === row)\n            return true;\n        if (selectedRange) {\n            const inRange = row >= Math.min(selectedRange.from.row, selectedRange.to.row) &&\n                row <= Math.max(selectedRange.from.row, selectedRange.to.row);\n            return inRange;\n        }\n        return false;\n    }\n    renderText(row, renderBox) {\n        const { y, height } = renderBox;\n        this.ctx.fillStyle = \"black\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.textBaseline = \"middle\";\n        this.ctx.font = \"12px Arial\";\n        this.ctx.fillText(this.root.config.rows[row].title, this.width / 2, y - this.root.viewport.top + height / 2);\n    }\n    renderRect(column, renderBox) {\n        const { y, height } = renderBox;\n        const isRowSeleted = this.isRowSelected(column);\n        this.ctx.fillStyle = isRowSeleted ? \"#c7ebff\" : \"white\";\n        this.ctx.strokeStyle = \"black\";\n        this.ctx.lineWidth = this.resizerHeight;\n        const specialY = y - this.root.viewport.top;\n        this.ctx.fillRect(0, specialY - 1, this.width, height);\n        this.ctx.strokeRect(0, specialY - 1, this.width, height);\n    }\n    renderSingleRow(row) {\n        const renderBox = new RenderBox(this.root.config, {\n            column: 0,\n            row: row,\n        });\n        this.renderRect(row, renderBox);\n        this.renderText(row, renderBox);\n    }\n    renderBar() {\n        const lastRowIdx = this.root.viewport.lastRow + 3;\n        const firstRowIdx = this.root.viewport.firstRow;\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, 0);\n        this.ctx.strokeStyle = \"black\";\n        this.ctx.lineWidth = 16;\n        this.ctx.lineTo(35, 0);\n        this.ctx.closePath();\n        this.ctx.stroke();\n        for (let row = firstRowIdx; row <= lastRowIdx; row++) {\n            if (!this.root.config.rows[row])\n                break;\n            this.renderSingleRow(row);\n        }\n    }\n}\n","import { Cell, CellStyles } from \"./cell\";\nimport { EventTypes } from \"./events\";\nexport class Clipboard {\n    saved = null;\n    root;\n    constructor(root) {\n        this.root = root;\n    }\n    copy(data, range) {\n        const mapedData = data\n            .map((row) => {\n            return row\n                .map((item) => {\n                return item.displayValue;\n            })\n                .join(\"\\t\");\n        })\n            .join(\"\\n\");\n        this.saved = data;\n        navigator.clipboard.writeText(mapedData);\n        this.root.events.dispatch({\n            type: EventTypes.COPY_CELLS,\n            data,\n            dataAsString: mapedData,\n            range,\n        });\n    }\n    paste(root, { column, row }, event) {\n        if (!this.saved) {\n            if (!event.clipboardData)\n                return;\n            const data = event.clipboardData.getData(\"text\");\n            try {\n                const arr = data.split(\"\\n\").map((item) => item.split(\"\\t\"));\n                const arrayOfCells = arr.map((innerRow) => {\n                    return innerRow.map((item) => {\n                        const cellProps = {\n                            displayValue: item,\n                            position: {\n                                column,\n                                row,\n                            },\n                            resultValue: item,\n                            style: new CellStyles(),\n                            value: item,\n                        };\n                        return new Cell(cellProps);\n                    });\n                });\n                const rowsLength = arrayOfCells.length;\n                const colsLength = arrayOfCells[0] ? arrayOfCells[0].length : 0;\n                for (let i = 0; i < rowsLength; i++) {\n                    for (let j = 0; j < colsLength; j++) {\n                        const savedCell = arrayOfCells[i][j];\n                        const position = {\n                            column: column + j,\n                            row: row + i,\n                        };\n                        const values = {\n                            displayValue: savedCell.displayValue,\n                            value: savedCell.value,\n                            style: savedCell.style,\n                        };\n                        root.changeCellValues(position, values, false);\n                    }\n                }\n            }\n            catch (err) {\n                console.error(\"Cannot read clipboard. \", err);\n            }\n            root.renderSheet();\n            return;\n        }\n        const rowsLength = this.saved.length;\n        const colsLength = this.saved[0] ? this.saved[0].length : 0;\n        for (let i = 0; i < rowsLength; i++) {\n            for (let j = 0; j < colsLength; j++) {\n                const savedCell = this.saved[i][j];\n                const position = {\n                    column: column + j,\n                    row: row + i,\n                };\n                const values = {\n                    displayValue: savedCell.displayValue,\n                    value: savedCell.value,\n                    style: savedCell.style,\n                };\n                root.changeCellValues(position, values, false);\n            }\n        }\n    }\n}\n","import { Editor } from \"./components/editor\";\nimport { Scroller } from \"./components/scroller\";\nimport { Sheet } from \"./components/sheet\";\nimport { Table } from \"./components/table\";\nimport { Toolbar } from \"./components/toolbar\";\nimport { Cell, } from \"./modules/cell\";\nimport { Config, } from \"./modules/config\";\nimport { Selection } from \"./modules/selection\";\nimport { Styles } from \"./modules/styles\";\nimport { Viewport } from \"./modules/viewport\";\nimport \"./scss/main.scss\";\nimport { createSampleData } from \"./utils/createData\";\nimport { Cache, CachedColumn, CachedRow } from \"./modules/cache\";\nimport { Row } from \"./modules/row\";\nimport { Column } from \"./modules/column\";\nimport { ColumnsBar } from \"./components/columnsBar\";\nimport { RowsBar } from \"./components/rowsBar\";\nimport { EventTypes, Events } from \"./modules/events\";\nimport { Clipboard } from \"./modules/clipboard\";\nexport const CSS_PREFIX = \"modern_sc_\";\nexport default class Spreadsheet {\n    table;\n    scroller;\n    toolbar;\n    rowsBar;\n    columnsBar;\n    sheet;\n    editor;\n    styles;\n    config;\n    data;\n    viewport;\n    selection;\n    cache;\n    events;\n    clipboard;\n    constructor(target, props) {\n        const data = createSampleData(40, 40);\n        const config = this.makeConfigFromData(data, props?.view ?? { height: 600, width: 800 });\n        if (props?.view) {\n            config.view = props.view;\n        }\n        this.config = new Config(config);\n        this.config.onCellClick = props?.onCellClick ?? null;\n        this.config.onSelectonChange = props?.onSelectionChange ?? null;\n        this.config.onCellChange = props?.onCellChange ?? null;\n        this.config.onCopy = props?.onCopy ?? null;\n        this.rowsBar = new RowsBar(this);\n        this.columnsBar = new ColumnsBar(this);\n        this.sheet = new Sheet(this);\n        this.table = new Table(this);\n        this.scroller = new Scroller(this);\n        this.toolbar = new Toolbar(this);\n        this.editor = new Editor(this);\n        this.cache = this.getInitialCache();\n        this.viewport = new Viewport(this, this.scroller.getViewportBoundlingRect());\n        this.selection = new Selection();\n        this.events = new Events(this);\n        this.clipboard = new Clipboard(this);\n        this.data = data;\n        this.styles = new Styles();\n        this.buildComponent();\n        this.setElementsPositions();\n        this.appendTableToTarget(target);\n        this.renderSheet();\n        this.renderColumnsBar();\n        this.renderRowsBar();\n    }\n    setRowsBarPosition() {\n        const top = this.columnsBar.height + this.toolbar.height;\n        const left = 0;\n        this.rowsBar.setElementPosition(top, left);\n    }\n    setColumnsBarPosition() {\n        const top = this.toolbar.height;\n        const left = this.rowsBar.width;\n        this.columnsBar.setElementPosition(top, left);\n    }\n    setElementsPositions() {\n        this.setRowsBarPosition();\n        this.setColumnsBarPosition();\n    }\n    getInitialCache() {\n        const cachedCols = [];\n        let currentWidth = 0;\n        for (let i = 0; i <= this.config.columns.length - 1; i++) {\n            const col = this.config.columns[i];\n            currentWidth += col.width;\n            const cacheCol = new CachedColumn({\n                xPos: currentWidth,\n                colIdx: i,\n            });\n            cachedCols.push(cacheCol);\n        }\n        const cachedRows = [];\n        let currentHeight = 0;\n        for (let i = 0; i <= this.config.rows.length - 1; i++) {\n            const row = this.config.rows[i];\n            currentHeight += row.height;\n            const cacheRow = new CachedRow({\n                yPos: currentHeight,\n                rowIdx: i,\n            });\n            cachedRows.push(cacheRow);\n        }\n        const cache = new Cache({\n            columns: cachedCols,\n            rows: cachedRows,\n        });\n        return cache;\n    }\n    buildComponent() {\n        const content = document.createElement(\"div\"); //* Abstract\n        content.style.top = this.columnsBarHeight + \"px\";\n        content.style.left = this.rowsBarWidth + \"px\";\n        content.appendChild(this.sheet.element);\n        content.classList.add(CSS_PREFIX + \"content\");\n        this.table.element.appendChild(this.toolbar.element);\n        this.table.element.appendChild(this.rowsBar.element);\n        this.table.element.appendChild(this.columnsBar.element);\n        this.table.element.appendChild(content);\n        this.table.element.appendChild(this.scroller.element);\n        this.table.element.append(this.editor.element);\n    }\n    /**Destroy spreadsheet DOM element.\n     *\n     * May be usefull when need to rerender component.\n     */\n    destroy() {\n        this.table.element.remove();\n    }\n    appendTableToTarget(target) {\n        if (typeof target === \"string\") {\n            const element = document.querySelector(target);\n            if (!element)\n                throw new Error(`Element with selector ${target} is not finded in DOM.\\n Make sure it exists.`);\n            element?.appendChild(this.table.element);\n        }\n        if (target instanceof HTMLElement) {\n            target.append(this.table.element);\n        }\n    }\n    /** Canvas rendering context 2D.\n     *\n     * Abble to draw on canvas with default CanvasAPI methods\n     */\n    get ctx() {\n        return this.sheet.ctx;\n    }\n    get viewProps() {\n        return this.config.view;\n    }\n    get columnsBarHeight() {\n        return this.columnsBar.height;\n    }\n    get rowsBarWidth() {\n        return this.rowsBar.width;\n    }\n    get toolbarHeight() {\n        return this.toolbar.height;\n    }\n    /** Focusing on interactive part of spreadsheet */\n    focusTable() {\n        this.scroller.element.focus();\n    }\n    getCellByCoords(x, y) {\n        return this.sheet.getCellByCoords(x, y);\n    }\n    getCell(position) {\n        const { column, row } = position;\n        return this.data[row][column];\n    }\n    changeCellValues(position, values, enableCallback = true) {\n        const { column, row } = position;\n        this.data[row][column].changeValues(values);\n        this.events.dispatch({\n            type: EventTypes.CELL_CHANGE,\n            cell: this.data[row][column],\n            enableCallback: enableCallback\n        });\n        this.renderCell(row, column);\n    }\n    changeCellStyles(position, styles) {\n        const { column, row } = position;\n        this.data[row][column].changeStyles(styles);\n        this.renderCell(row, column);\n    }\n    applyActionToRange(range, callback) {\n        const fromRow = Math.min(range.from.row, range.to.row);\n        const toRow = Math.max(range.from.row, range.to.row);\n        const fromCol = Math.min(range.from.column, range.to.column);\n        const toCol = Math.max(range.from.column, range.to.column);\n        for (let row = fromRow; row <= toRow; row++) {\n            for (let col = fromCol; col <= toCol; col++) {\n                const cell = this.data[row][col];\n                callback(cell);\n            }\n        }\n    }\n    deleteSelectedCellsValues() {\n        if (this.selection.selectedRange !== null) {\n            this.applyActionToRange(this.selection.selectedRange, (cell) => {\n                this.changeCellValues(cell.position, {\n                    displayValue: \"\",\n                    resultValue: \"\",\n                    value: \"\",\n                });\n            });\n        }\n        else {\n            if (!this.selection.selectedCell)\n                return;\n            this.changeCellValues(this.selection.selectedCell, {\n                displayValue: \"\",\n                resultValue: \"\",\n                value: \"\",\n            });\n        }\n    }\n    showEditor(position, initialString) {\n        this.editor.show(position, initialString);\n    }\n    renderSheet() {\n        this.sheet.renderSheet();\n    }\n    renderSelection() {\n        this.sheet.renderSelection();\n    }\n    renderColumnsBar() {\n        this.columnsBar.renderBar();\n    }\n    renderRowsBar() {\n        this.rowsBar.renderBar();\n    }\n    renderCell(row, col) {\n        this.data[row][col].render(this);\n    }\n    loadData(data) {\n        const rowsLength = data.length;\n        const colsLength = data[0] ? data[0].length : 0;\n        console.log(\"!!FORMATTED DATA\", rowsLength, colsLength, data[0]);\n        this.data = [];\n        const formattedData = [];\n        // Transform serialized objects to Cells\n        for (let row = 0; row < rowsLength; row++) {\n            const innerRow = [];\n            for (let col = 0; col < colsLength; col++) {\n                const cell = data[row][col];\n                innerRow.push(new Cell({\n                    displayValue: cell.displayValue,\n                    position: cell.position,\n                    resultValue: cell.resultValue,\n                    value: cell.value,\n                    style: cell.style,\n                }));\n            }\n            formattedData.push(innerRow);\n        }\n        this.data = formattedData;\n        this.selection.selectedCell = null;\n        this.selection.selectedRange = null;\n        this.config = this.makeConfigFromData(formattedData, this.config.view);\n        this.cache = this.getInitialCache();\n        this.scroller.updateScrollerSize();\n        this.viewport = new Viewport(this, this.scroller.getViewportBoundlingRect());\n        this.renderSheet();\n        return this;\n    }\n    makeConfigFromData(data, view) {\n        const lastRowIdx = data.length - 1;\n        const lastColIdx = data[0] ? data[0].length : 0;\n        const rows = [];\n        for (let row = 0; row < lastRowIdx; row++) {\n            rows.push(new Row({\n                height: 40,\n                title: String(row),\n            }));\n        }\n        const columns = [];\n        for (let col = 0; col < lastColIdx; col++) {\n            columns.push(new Column({\n                width: 150,\n                title: String(col),\n            }));\n        }\n        const config = new Config({\n            view,\n            rows,\n            columns,\n            onCellClick: null,\n        });\n        return config;\n    }\n    serializeData() {\n        const rowsLength = this.data.length;\n        const colsLength = this.data[0] ? this.data[0].length : 0;\n        const cellsArray = [];\n        for (let row = 0; row < rowsLength; row++) {\n            const innerRow = [];\n            for (let col = 0; col < colsLength; col++) {\n                innerRow.push(this.data[row][col].getSerializableCell());\n            }\n            cellsArray.push(innerRow);\n        }\n        return cellsArray;\n    }\n}\nexport * from \"./modules/cache\";\nexport * from \"./modules/cell\";\nexport * from \"./modules/column\";\nexport * from \"./modules/config\";\nexport * from \"./modules/renderBox\";\nexport * from \"./modules/row\";\nexport * from \"./modules/selection\";\nexport * from \"./modules/styles\";\nexport * from \"./modules/viewport\";\nexport * from \"./utils/createData\";\n"],"names":["EventTypes","Events","root","__publicField","event","scroller","_a","_b","offsetX","offsetY","clickedCell","cell","selection","Selection","enableCallback","range","data","dataAsString","action","RenderBox","config","cellPosition","column","x","i","row","y","Editor","key","target","element","CSS_PREFIX","position","initialString","height","width","checkEqualCellSelections","selection1","selection2","Scroller","lastSelectedCell","isRangeChanged","newSelection","keysRegex","isPressedLetterKey","cells","from","to","rect","horizontalScroller","verticalScroller","mode","scrollTop","scrollLeft","bottom","right","groupScrollers","stack","acc","curr","totalHeight","totalWidth","CellStyles","props","Position","SerializableCell","Cell","styles","values","renderBox","ctx","Sheet","canvas","col","selectedCell","selectedRange","startRow","startCol","lastRow","lastCol","startCellBox","box","firstRowIdx","lastColIdx","lastRowIdx","firstColIdx","Table","container","sizes","Toolbar","toolbarElement","Config","Styles","Viewport","Column","Row","createSampleData","rows","columns","fillCellsByCoords","innerRow","value","createSampleConfig","rowsArr","rowItem","colsArr","colItem","makeSpreadsheetConfigAndData","CachedColumn","CachedRow","Cache","initial","rowIdx","colIdx","ColumnsBar","top","left","isColSelected","specialX","RowsBar","isRowSeleted","specialY","Clipboard","mapedData","item","arrayOfCells","cellProps","rowsLength","colsLength","j","savedCell","err","Spreadsheet","cachedCols","currentWidth","cacheCol","cachedRows","currentHeight","cacheRow","content","callback","fromRow","toRow","fromCol","toCol","formattedData","view","cellsArray"],"mappings":"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"}